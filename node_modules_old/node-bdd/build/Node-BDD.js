"use strict";
/**
 * @author Luuxis
 * @license CC-BY-NC 4.0 - https://creativecommons.org/licenses/by-nc/4.0/
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sqlite3_1 = __importDefault(require("sqlite3"));
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
class Database {
    async intilize(config) {
        return await new Promise((resolve, rejects) => {
            let pathFile = config.path;
            if (pathFile)
                pathFile = path_1.default.resolve(pathFile).replace('\\', '/');
            else
                pathFile = path_1.default.resolve(`${__dirname}/../database`).replace('\\', '/');
            if (!(0, fs_1.existsSync)(pathFile))
                (0, fs_1.mkdirSync)(pathFile, { recursive: true });
            let db = new sqlite3_1.default.Database(`${pathFile}/${config.databaseName}.${config.fileType}`, err => rejects(err));
            let columns = [
                'id INTEGER PRIMARY KEY',
                ...Object.entries(config.tableColumns).map((data) => data = `${data[0]} ${data[1]}`),
                'createdAt DATETIME',
                'updatedAt DATETIME'
            ];
            db.serialize(() => {
                db.run(`CREATE TABLE IF NOT EXISTS ${config.tableName}(${columns.join(', ')})`, err => {
                    if (err)
                        rejects(err);
                });
            });
            resolve({ config, table: db });
        });
    }
    async createData({ table, config }, data) {
        return await new Promise((resolve, rejects) => {
            data = Object.entries(data);
            let columns = [
                ...data.map((data) => data = data[0]),
                'createdAt',
                'updatedAt'
            ];
            data = [
                ...data.map((data) => data = data[1] ? data[1] : 'null'),
                new Date(),
                new Date()
            ];
            let columnsNumber = data.map((data) => data = '?');
            table.serialize(() => {
                table.run(`INSERT INTO ${config.tableName}(${columns.join(', ')}) VALUES(${columnsNumber.join(', ')})`, data, (err) => {
                    if (err)
                        rejects(err);
                });
                table.get(`SELECT * FROM ${config.tableName} WHERE id = last_insert_rowid()`, (err, data) => {
                    if (err)
                        rejects(err);
                    resolve(data);
                });
            });
        });
    }
    async updateData({ table, config }, data, id) {
        return await new Promise((resolve, rejects) => {
            table.serialize(() => {
                data = Object.entries(data);
                let columns = [
                    ...data.map((data) => data = data[0]),
                    'updatedAt'
                ];
                data = [
                    ...data.map((data) => data = data[1] ? data[1] : 'null'),
                    new Date()
                ];
                let newsData = data.map((element, int) => element = `${columns[int]} = '${data[int]}'`);
                table.run(`UPDATE ${config.tableName} SET ${newsData.join(', ')} WHERE id = ${id}`, (err) => {
                    if (err)
                        rejects(err);
                });
            });
            resolve();
        });
    }
    async createColumnsIfNoteExist({ table, config }, Columns) {
        let columnsList = await this.getColumnsList({ table, config });
        Object.keys(Columns).forEach(key => {
            if (columnsList.some((item) => item.name === key)) {
                delete Columns[key];
            }
        });
        if (Object.entries(columnsList).length > 0) {
            await this.createNewsColumns({ table, config }, Columns);
        }
    }
    async createNewsColumns({ table, config }, Columns) {
        return new Promise((resolve, rejects) => {
            table.serialize(() => {
                let newColumns = [
                    ...Object.entries(Columns).map((data) => data = `${data[0]} ${data[1]}`)
                ];
                for (let column of newColumns) {
                    table.run(`ALTER TABLE ${config.tableName} ADD ${column}`, (err) => {
                        if (err)
                            rejects(err);
                    });
                }
                resolve();
            });
        });
    }
    async getColumnsList({ table, config }) {
        return await new Promise((resolve, rejects) => {
            table.serialize(() => {
                table.all(`PRAGMA table_info('${config.tableName}')`, (err, data) => {
                    if (err)
                        rejects(err);
                    resolve(data.map((res) => res = { name: res.name }));
                });
            });
        });
    }
    async getAllData({ table, config }) {
        return await new Promise((resolve, rejects) => {
            table.serialize(() => {
                table.all(`SELECT * FROM ${config.tableName}`, (err, data) => {
                    if (err)
                        rejects(err);
                    resolve(data);
                });
            });
        });
    }
    async getDataById({ table, config }, id) {
        return await new Promise((resolve, rejects) => {
            table.serialize(() => {
                table.get(`SELECT * FROM ${config.tableName} WHERE id = ${id}`, (err, data) => {
                    if (err)
                        rejects(err);
                    resolve(data);
                });
            });
        });
    }
    async deleteData({ table, config }, id) {
        return await new Promise((resolve, rejects) => {
            table.serialize(() => {
                table.run(`DELETE FROM ${config.tableName} WHERE id = ${id}`, (err, data) => {
                    if (err)
                        rejects(err);
                    resolve(data);
                });
            });
        });
    }
    async deleteAllData({ table, config }) {
        return await new Promise((resolve, rejects) => {
            table.serialize(() => {
                table.run(`DELETE FROM ${config.tableName}`, (err, data) => {
                    if (err)
                        rejects(err);
                    resolve(data);
                });
            });
        });
    }
}
exports.default = Database;
